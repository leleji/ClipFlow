name: build-linux

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      upload_url:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [linux-x64, linux-arm64]  # 定义两个架构
        self_contained: [true, false]  # 定义是否为 self-contained
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y dpkg-dev

      # Define build and package
      - name: Build and package
        run: |
          runtime=${{ matrix.arch }}
          self_contained=${{ matrix.self_contained }}
          output_dir="./out/${runtime}-${self_contained}"
          staging_folder="./staging_folder_${runtime}-${self_contained}"
          control_file="./build/control_${runtime}-${self_contained}"
          package_name="ClipFlow_${{ inputs.version }}_${runtime}"

          # Append "-self-contained" to package name if self-contained is true
          if [ "$self_contained" = "true" ]; then
            package_name="${package_name}-self-contained"
            sc_flag="--self-contained true"
          else
            sc_flag="--self-contained false"
          fi

          # Build .NET application
          mkdir -p $output_dir
          dotnet publish "./str/ClipFlow/ClipFlow.csproj" \
            --verbosity quiet \
            --nologo \
            --configuration Release \
            $sc_flag \
            --runtime $runtime \
            --output $output_dir

          # Calculate installed size
          size=$(du -s $output_dir | cut -f1)

          # Prepare control file
          cp ./build/control $control_file
          sed -i \
            -e "s/{{VERSION}}/${{ inputs.version }}/" \
            -e "s/{{ARCH}}/$runtime/" \
            -e "s/{{SIZE}}/$size/" \
            $control_file

          # Prepare staging folder
          mkdir -p $staging_folder/DEBIAN
          cp $control_file $staging_folder/DEBIAN/control

          mkdir -p $staging_folder/usr/lib/clipflow
          cp -f -a $output_dir/. $staging_folder/usr/lib/clipflow/
          chmod -R a+rX $staging_folder/usr/lib/clipflow/
          chmod +x $staging_folder/usr/lib/clipflow/ClipFlow

          mkdir -p $staging_folder/usr/share/applications
          cp ./build/clipflow.desktop $staging_folder/usr/share/applications/clipflow.desktop

          mkdir -p $staging_folder/usr/share/pixmaps
          cp ./build/logo.png $staging_folder/usr/share/pixmaps/clipflow.png
          chmod 644 $staging_folder/usr/share/pixmaps/clipflow.png

          mkdir -p $staging_folder/usr/share/icons/hicolor/scalable/apps
          cp ./build/logo.svg $staging_folder/usr/share/icons/hicolor/scalable/apps/clipflow.svg

          # Build .deb package
          dpkg-deb --root-owner-group --build $staging_folder ./${package_name}.deb

      # Upload packages to release
      - name: Upload to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ inputs.upload_url }}
          asset_path: ./ClipFlow_${{ inputs.version }}_${{ matrix.arch }}${{ matrix.self_contained && '-self-contained' || '' }}.deb  # 使用明确的路径
          asset_name: "ClipFlow-${{ inputs.version }}-${{ matrix.arch }}${{ matrix.self_contained && '-self-contained' || '' }}.deb"
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
